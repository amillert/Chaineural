{
  "_from": "ngx-socket-io",
  "_id": "ngx-socket-io@3.0.1",
  "_inBundle": false,
  "_integrity": "sha512-6+99AULDEcdrsFSd9FVo5mUSpQMa2KL6twPbteoEv3qWO0Hh2kdrzTjvPdsC2jeTuEuqa8R9l5/3eGYdiLZyWQ==",
  "_location": "/ngx-socket-io",
  "_phantomChildren": {
    "accepts": "1.3.7",
    "after": "0.8.2",
    "arraybuffer.slice": "0.0.7",
    "async-limiter": "1.0.1",
    "backo2": "1.0.2",
    "base64-arraybuffer": "0.1.5",
    "blob": "0.0.5",
    "component-bind": "1.0.0",
    "component-inherit": "0.0.3",
    "debug": "4.1.1",
    "has-binary2": "1.0.3",
    "has-cors": "1.1.0",
    "indexof": "0.0.1",
    "object-component": "0.0.3",
    "parseqs": "0.0.5",
    "parseuri": "0.0.5",
    "socket.io-adapter": "1.1.1",
    "to-array": "0.1.4",
    "xmlhttprequest-ssl": "1.5.5",
    "yeast": "0.1.2"
  },
  "_requested": {
    "escapedName": "ngx-socket-io",
    "fetchSpec": "latest",
    "name": "ngx-socket-io",
    "raw": "ngx-socket-io",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-socket-io/-/ngx-socket-io-3.0.1.tgz",
  "_shasum": "6dc50144ef4c793ecc597955081ec5c5dd9ce033",
  "_shrinkwrap": null,
  "_spec": "ngx-socket-io",
  "_where": "/c/chaineural-network/fabric/chaineural-network/ui/panel-ui",
  "author": {
    "name": "rodgc"
  },
  "bugs": {
    "url": "https://github.com/rodgc/ngx-socket-io/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "core-js": "^3.0.0",
    "reflect-metadata": "^0.1.10",
    "socket.io": "^2.2.0",
    "socket.io-client": "^2.2.0",
    "tslib": "^1.9.0",
    "zone.js": "^0.10.1"
  },
  "deprecated": false,
  "description": "Socket.IO module for Angular",
  "devDependencies": {
    "@angular/compiler": "^8.0.0",
    "@angular/compiler-cli": "^8.0.0",
    "@angular/core": "^8.0.0",
    "@types/node": "^12.7.1",
    "@types/socket.io": "^2.1.2",
    "@types/socket.io-client": "^1.4.32",
    "ng-packagr": "^5.4.3",
    "rxjs": "^6.1.0",
    "server-destroy": "^1.0.1",
    "tslint": "^5.18.0",
    "typescript": "^3.5.3"
  },
  "es2015": "fesm2015/ngx-socket-io.js",
  "esm2015": "esm2015/ngx-socket-io.js",
  "esm5": "esm5/ngx-socket-io.js",
  "fesm2015": "fesm2015/ngx-socket-io.js",
  "fesm5": "fesm5/ngx-socket-io.js",
  "homepage": "https://github.com/rodgc/ngx-socket-io#readme",
  "keywords": [
    "Angular",
    "Socket-io",
    "TypeScript"
  ],
  "license": "MIT",
  "main": "bundles/ngx-socket-io.umd.js",
  "metadata": "ngx-socket-io.metadata.json",
  "module": "fesm5/ngx-socket-io.js",
  "name": "ngx-socket-io",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^8.0.0",
    "@angular/core": "^8.0.0",
    "rxjs": "^6.1.0"
  },
  "readme": "# ngx-socket-io\r\n[![Build Status](https://travis-ci.org/rodgc/ngx-socket-io.svg?branch=master)](https://travis-ci.org/rodgc/ngx-socket-io)\r\n[![npm version](https://badge.fury.io/js/ngx-socket-io.svg)](https://badge.fury.io/js/ngx-socket-io)\r\n[![npm downloads](https://img.shields.io/badge/Downloads-132%2Fmonth-brightgreen.svg)](https://github.com/rodgc/ngx-socket-io)\r\n\r\n[Socket.IO](http://socket.io/) module for Angular\r\n\r\n## Install\r\n``` npm install ngx-socket-io ```\r\n\r\n## How to use\r\n\r\n### Import and configure SocketIoModule\r\n\r\n```ts\r\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\r\n\r\nconst config: SocketIoConfig = { url: 'http://localhost:8988', options: {} };\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    SocketIoModule.forRoot(config)\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n```\r\n\r\nWe need to configure ```SocketIoModule``` module using the object ```config``` of type ```SocketIoConfig```, this object accepts two optional properties they are the same used here [io(url[, options])](https://github.com/socketio/socket.io-client/blob/master/docs/API.md#iourl-options).\r\n\r\nNow we pass the configuration to the static method ```forRoot``` of ```SocketIoModule```\r\n\r\n\r\n### Using your socket Instance\r\n\r\nThe ```SocketIoModule``` provides now a configured ```Socket``` service that can be injected anywhere inside the ```AppModule```.\r\n\r\n```typescript\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Injectable()\r\nexport class ChatService {\r\n\r\n    constructor(private socket: Socket) { }\r\n\r\n    sendMessage(msg: string){\r\n        this.socket.emit(\"message\", msg);\r\n    }\r\n     getMessage() {\r\n        return this.socket\r\n            .fromEvent(\"message\")\r\n            .map( data => data.msg );\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Using multiple sockets with different end points\r\n\r\nIn this case we do not configure the ```SocketIoModule``` directly using ```forRoot```. What we have to do is: extend the ```Socket``` service, and call ```super()``` with the ```SocketIoConfig``` object type (passing ```url``` & ```options``` if any).\r\n\r\n```typescript\r\n\r\nimport { Injectable, NgModule } from '@angular/core';\r\nimport { Socket } from 'ngx-socket-io';\r\n\r\n@Injectable()\r\nexport class SocketOne extends Socket {\r\n\r\n    constructor() {\r\n        super({ url: 'http://url_one:portOne', options: {} });\r\n    }\r\n\r\n}\r\n\r\n@Injectable()\r\nexport class SocketTwo extends Socket {\r\n\r\n    constructor() {\r\n        super({ url: 'http://url_two:portTwo', options: {} });\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    //components\r\n  ],\r\n  imports: [\r\n    SocketIoModule,\r\n    //...\r\n  ],\r\n  providers: [SocketOne, SocketTwo],\r\n  bootstrap: [/** AppComponent **/]\r\n})\r\nexport class AppModule { }\r\n\r\n```\r\n\r\nNow you can inject ```SocketOne```, ```SocketTwo``` in any other services and / or components.\r\n\r\n\r\n## API\r\n\r\nMost of the functionalities here you are already familiar with.\r\n\r\nThe only addition is the ```fromEvent``` method, which returns an ```Observable``` that you can subscribe to.\r\n\r\n### `socket.of(namespace: string)`\r\n\r\nTakes an namespace.\r\nWorks the same as in Socket.IO.\r\n\r\n### `socket.on(eventName: string, callback: Function)`\r\n\r\nTakes an event name and callback.\r\nWorks the same as in Socket.IO.\r\n\r\n### `socket.removeListener(eventName: string, callback?: Function)`\r\n\r\nTakes an event name and callback.\r\nWorks the same as in Socket.IO.\r\n\r\n### `socket.removeAllListeners(eventName?: string)`\r\n\r\nTakes an event name.\r\nWorks the same as in Socket.IO.\r\n\r\n### `socket.emit(eventName:string, message?: any, [callback: Function])`\r\n\r\nSends a message to the server.\r\nOptionally takes a callback.\r\nWorks the same as in Socket.IO.\r\n\r\n### `socket.fromEvent<T>(eventName: string): Observable<T>`\r\n\r\nTakes an event name and returns an Observable that you can subscribe to.\r\n\r\n### `socket.fromEventOnce<T>(eventName: string): Promise<T>`\r\n\r\nCreates a Promise for a one-time event.\r\n\r\nYou should keep a reference to the Observable subscription and unsubscribe when you're done with it.\r\nThis prevents memory leaks as the event listener attached will be removed (using ```socket.removeListener```) ONLY and when/if you unsubscribe.\r\n\r\nIf you have multiple subscriptions to an Observable only the last unsubscription will remove the listener.\r\n\r\n## Know Issue\r\n\r\nFor `error TS2345` you need to add this to your `tsconfig.json`.\r\n\r\n```json\r\n{\r\n  ...\r\n  \"compilerOptions\": {\r\n    ...\r\n    \"paths\": {\r\n      \"rxjs\": [\"node_modules/rxjs\"]\r\n    }\r\n  },\r\n}\r\n```\r\n\r\n## Related projects\r\n\r\n- [bougarfaoui/ng-socket-io](https://github.com/bougarfaoui/ng-socket-io) - Socket.IO module for Angular\r\n\r\n## LICENSE\r\n\r\nMIT\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rodgc/ngx-socket-io.git"
  },
  "sideEffects": false,
  "typings": "ngx-socket-io.d.ts",
  "version": "3.0.1"
}
